<?php

namespace ContainerKit99vq;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getForm_RegistryService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/FormExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/Extension/DependencyInjection/DependencyInjectionExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/ResolvedFormTypeFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/Extension/DataCollector/Proxy/ResolvedTypeFactoryDataCollectorProxy.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/form/ResolvedFormTypeFactory.php';

        return $container->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Form\\Filter\\AreaFilterType' => ['privates', 'App\\Form\\Filter\\AreaFilterType', 'getAreaFilterTypeService', true],
            'App\\Form\\Filter\\EmpleadosFilterType' => ['privates', 'App\\Form\\Filter\\EmpleadosFilterType', 'getEmpleadosFilterTypeService', true],
            'App\\Form\\Filter\\GroupFilterType' => ['privates', 'App\\Form\\Filter\\GroupFilterType', 'getGroupFilterTypeService', true],
            'App\\Form\\Filter\\PropiedadesFilterType' => ['privates', 'App\\Form\\Filter\\PropiedadesFilterType', 'getPropiedadesFilterTypeService', true],
            'App\\Form\\Filter\\UserFilterType' => ['privates', 'App\\Form\\Filter\\UserFilterType', 'getUserFilterTypeService', true],
            'App\\Form\\Type\\ChangePasswordType' => ['privates', 'App\\Form\\Type\\ChangePasswordType', 'getChangePasswordTypeService', true],
            'App\\Form\\Type\\Custom\\CustomFromAndToDateType' => ['privates', 'App\\Form\\Type\\Custom\\CustomFromAndToDateType', 'getCustomFromAndToDateTypeService', true],
            'App\\Form\\Type\\Custom\\CustomGroupedChoicesType' => ['privates', 'App\\Form\\Type\\Custom\\CustomGroupedChoicesType', 'getCustomGroupedChoicesTypeService', true],
            'App\\Form\\Type\\Custom\\CustomSingleCheckbox' => ['privates', 'App\\Form\\Type\\Custom\\CustomSingleCheckbox', 'getCustomSingleCheckboxService', true],
            'App\\Form\\Type\\Custom\\DateTimeW3CType' => ['privates', 'App\\Form\\Type\\Custom\\DateTimeW3CType', 'getDateTimeW3CTypeService', true],
            'App\\Form\\Type\\RecoverPasswordType' => ['privates', 'App\\Form\\Type\\RecoverPasswordType', 'getRecoverPasswordTypeService', true],
            'App\\Form\\Type\\RegistrationType' => ['privates', 'App\\Form\\Type\\RegistrationType', 'getRegistrationTypeService', true],
            'App\\Form\\Type\\ResetPasswordType' => ['privates', 'App\\Form\\Type\\ResetPasswordType', 'getResetPasswordTypeService', true],
            'App\\Form\\Type\\SaveAreaType' => ['privates', 'App\\Form\\Type\\SaveAreaType', 'getSaveAreaTypeService', true],
            'App\\Form\\Type\\SaveEmpleadoType' => ['privates', 'App\\Form\\Type\\SaveEmpleadoType', 'getSaveEmpleadoTypeService', true],
            'App\\Form\\Type\\SaveGroupType' => ['privates', 'App\\Form\\Type\\SaveGroupType', 'getSaveGroupTypeService', true],
            'App\\Form\\Type\\SavePropiedadType' => ['privates', 'App\\Form\\Type\\SavePropiedadType', 'getSavePropiedadTypeService', true],
            'App\\Form\\Type\\SaveUserType' => ['privates', 'App\\Form\\Type\\SaveUserType', 'getSaveUserTypeService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['services', '.container.private.form.type.file', 'get_Container_Private_Form_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'App\\Form\\Filter\\AreaFilterType' => '?',
            'App\\Form\\Filter\\EmpleadosFilterType' => '?',
            'App\\Form\\Filter\\GroupFilterType' => '?',
            'App\\Form\\Filter\\PropiedadesFilterType' => '?',
            'App\\Form\\Filter\\UserFilterType' => '?',
            'App\\Form\\Type\\ChangePasswordType' => '?',
            'App\\Form\\Type\\Custom\\CustomFromAndToDateType' => '?',
            'App\\Form\\Type\\Custom\\CustomGroupedChoicesType' => '?',
            'App\\Form\\Type\\Custom\\CustomSingleCheckbox' => '?',
            'App\\Form\\Type\\Custom\\DateTimeW3CType' => '?',
            'App\\Form\\Type\\RecoverPasswordType' => '?',
            'App\\Form\\Type\\RegistrationType' => '?',
            'App\\Form\\Type\\ResetPasswordType' => '?',
            'App\\Form\\Type\\SaveAreaType' => '?',
            'App\\Form\\Type\\SaveEmpleadoType' => '?',
            'App\\Form\\Type\\SaveGroupType' => '?',
            'App\\Form\\Type\\SavePropiedadType' => '?',
            'App\\Form\\Type\\SaveUserType' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.form.transformation_failure_handling'] ?? $container->load('getForm_TypeExtension_Form_TransformationFailureHandlingService'));
            yield 1 => ($container->privates['form.type_extension.form.http_foundation'] ?? $container->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 2 => ($container->privates['form.type_extension.form.validator'] ?? $container->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 3 => ($container->privates['form.type_extension.upload.validator'] ?? $container->load('getForm_TypeExtension_Upload_ValidatorService'));
            yield 4 => ($container->privates['form.type_extension.csrf'] ?? $container->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($container->privates['form.type_extension.form.data_collector'] ?? $container->load('getForm_TypeExtension_Form_DataCollectorService'));
        }, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.repeated.validator'] ?? ($container->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.submit.validator'] ?? ($container->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()));
        }, 1)], new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_guesser.validator'] ?? $container->load('getForm_TypeGuesser_ValidatorService'));
            yield 1 => ($container->privates['form.type_guesser.doctrine'] ?? $container->load('getForm_TypeGuesser_DoctrineService'));
        }, 2))], new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ($container->privates['data_collector.form'] ?? $container->getDataCollector_FormService())));
    }
}
